import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
// import type { PayloadAction } from '@reduxjs/toolkit';
// import { IFilters } from '../../redux/types';
import { toQueryString } from '../../redux/query';

{{#uniqueImports}}
{{#modelName}}
import { {{interface}} } from '../../models/{{modelName}}';
{{/modelName}}
{{/uniqueImports}}

interface {{sliceName}}State {
  entities: Record<string, any>[];
  loading: 'idle' | 'pending' | 'succeeded' | 'failed';
  error: string | null;
}

const initialState: {{sliceName}}State = {
  entities: [],
  loading: 'idle',
  error: null,
};

{{#endpoints}}
export const {{operationId}} = createAsyncThunk(
  '{{slicePath}}/{{operationId}}',
  async ({{#params}}{{#types}}{{params}}: {{types}}{{/types}}{{/params}}, { rejectWithValue }) => {
    try { {{#params}}
      const qs = toQueryString({{{params}}}){{/params}}
      const url = `{{{url}}}{{#params}}?${qs}{{/params}}`
      const response = await fetch(url, {
        method: '{{method}}',
        headers: {
          'Content-Type': 'application/json',
        },{{#bodyParam}}
        body: JSON.stringify({{bodyParam}}),{{/bodyParam}}
      });

      if (!response.ok) {
        throw new Error('Network response was not ok');
      }

      return await response.json();
    } catch (error: any) {
      return rejectWithValue(error.message);
    }
  }
);
{{/endpoints}}

export const {{sliceName}}Slice = createSlice({
  name: '{{{slicePath}}}',
  initialState,
  reducers: {
    clearErrors: (state) => {
      state.error = null;
    },
    resetState: (state) => {
      state.entities = [];
      state.loading = 'idle';
      state.error = null;
    },
  },
  extraReducers: (builder) => {
    {{#endpoints}}
    /** {{operationId}} **/
    builder
      .addCase({{operationId}}.pending, (state) => {
        state.loading = 'pending';
      })
      .addCase({{operationId}}.fulfilled, (state, action) => {
        state.loading = 'succeeded';
        {{#isListEndpoint}}
        state.entities = action.payload.results || [];
        {{/isListEndpoint}}
        {{^isListEndpoint}}
        if (Array.isArray(action.payload)) {
          state.entities = action.payload;
        } else {
          state.entities = [action.payload]  as Record<string, any>[];
        }
        {{/isListEndpoint}}
      })
      .addCase({{operationId}}.rejected, (state, action) => {
        state.loading = 'failed';
        state.error = action.payload as string;
      });
    {{/endpoints}}
  },
});

export const { clearErrors, resetState } = {{sliceName}}Slice.actions;
export default {{sliceName}}Slice.reducer;
